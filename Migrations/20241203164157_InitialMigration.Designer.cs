// <auto-generated />
using System;
using MSMS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MSMS.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20241203164157_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Account", b =>
                {
                    b.Property<int>("EmployeeNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeNumber"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Schedule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EmployeeNumber");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("MSMS.Models.Diagnosis.Diagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiagnosisDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Doctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalRecordId1")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicalRecordId");

                    b.HasIndex("MedicalRecordId1");

                    b.HasIndex("PatientId");

                    b.ToTable("Diagnoses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiagnosisDetails = "Chickenpox Varicella",
                            Doctor = "Dr. John Doe",
                            MedicalRecordId = 1,
                            Notes = "high Fever and Fatigue",
                            PatientId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiagnosisDetails = "Influenza",
                            Doctor = "Dra. Jane Doe",
                            MedicalRecordId = 2,
                            Notes = "Mucus on tne alveoli.",
                            PatientId = 2
                        });
                });

            modelBuilder.Entity("MSMS.Models.Diagnosis.MedicalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentMedications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Doctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("RecordDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("MedicalRecords");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 12, 3, 16, 41, 56, 825, DateTimeKind.Utc).AddTicks(2995),
                            CurrentMedications = "Paracetamol",
                            Doctor = "Dr. John Doe",
                            PatientId = 1,
                            UpdatedAt = new DateTime(2024, 12, 3, 16, 41, 56, 825, DateTimeKind.Utc).AddTicks(2996)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 12, 3, 16, 41, 56, 825, DateTimeKind.Utc).AddTicks(2997),
                            CurrentMedications = "Paracetamol",
                            Doctor = "Dra. Jane Doe",
                            PatientId = 2,
                            UpdatedAt = new DateTime(2024, 12, 3, 16, 41, 56, 825, DateTimeKind.Utc).AddTicks(2998)
                        });
                });

            modelBuilder.Entity("MSMS.Models.Diagnosis.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("BloodPressure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmergencyContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyRelationship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Employer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<string>("InsuranceDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentGuardianContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentGuardianName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PastMedicalHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryCareProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpouseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 40,
                            ContactNumber = "1234567890",
                            DateOfBirth = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "John",
                            Gender = 0,
                            LastName = "Smith",
                            MiddleName = "Doe"
                        },
                        new
                        {
                            Id = 2,
                            Age = 30,
                            ContactNumber = "0987654321",
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jane",
                            Gender = 1,
                            LastName = "Smith",
                            MiddleName = "Doe"
                        });
                });

            modelBuilder.Entity("MSMS.Models.MedicineInventory.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Dosage")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<string>("GenericName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(38, 2)
                        .HasColumnType("decimal(38,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ReorderLevel")
                        .HasColumnType("int");

                    b.Property<DateOnly>("SuppliedDate")
                        .HasColumnType("date");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Medicines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandName = "",
                            Dosage = 0,
                            ExpiryDate = new DateOnly(1, 1, 1),
                            GenericName = "Paracetamol",
                            Price = 10.00m,
                            Quantity = 100,
                            ReorderLevel = 50,
                            SuppliedDate = new DateOnly(1, 1, 1),
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 2,
                            BrandName = "",
                            Dosage = 0,
                            ExpiryDate = new DateOnly(1, 1, 1),
                            GenericName = "Aspirin",
                            Price = 5.00m,
                            Quantity = 50,
                            ReorderLevel = 75,
                            SuppliedDate = new DateOnly(1, 1, 1),
                            SupplierId = 2
                        });
                });

            modelBuilder.Entity("MSMS.Models.MedicineInventory.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Address 1",
                            ContactNumber = "1234567890",
                            Name = "Supplier 1"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Address 2",
                            ContactNumber = "0987654321",
                            Name = "Supplier 2"
                        });
                });

            modelBuilder.Entity("MSMS.Models.Notification.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReferenceType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            CreatedAt = new DateOnly(2024, 12, 4),
                            Message = "Hello, World!",
                            ReferenceType = 0,
                            Title = ""
                        });
                });

            modelBuilder.Entity("MSMS.Models.Procedures.ActiveProcedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("ProcedureId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProcedureServiceDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("ProcedureId");

                    b.ToTable("ActiveProcedures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsPaid = false,
                            PatientId = 1,
                            ProcedureId = 1,
                            ProcedureServiceDateTime = new DateTime(2024, 12, 4, 0, 41, 56, 825, DateTimeKind.Local).AddTicks(3085)
                        },
                        new
                        {
                            Id = 2,
                            IsPaid = false,
                            PatientId = 2,
                            ProcedureId = 1,
                            ProcedureServiceDateTime = new DateTime(2024, 12, 3, 0, 41, 56, 825, DateTimeKind.Local).AddTicks(3086)
                        });
                });

            modelBuilder.Entity("MSMS.Models.Procedures.Procedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ProcedureDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcedureName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcedureNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProcedurePrice")
                        .HasPrecision(38, 2)
                        .HasColumnType("decimal(38,2)");

                    b.HasKey("Id");

                    b.ToTable("Procedure");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProcedureDescription = "Blood Test Duh",
                            ProcedureName = "Blood Test",
                            ProcedureNotes = "Disposable Syringe",
                            ProcedurePrice = 100.00m
                        },
                        new
                        {
                            Id = 2,
                            ProcedureDescription = "Analyze patient urine for bacteria or unbalanced electrolyte level.",
                            ProcedureName = "Urinalysis",
                            ProcedureNotes = "Make Patient drink water till they excrete.",
                            ProcedurePrice = 100.00m
                        });
                });

            modelBuilder.Entity("MSMS.Models.Diagnosis.Diagnosis", b =>
                {
                    b.HasOne("MSMS.Models.Diagnosis.MedicalRecord", null)
                        .WithMany("Diagnoses")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MSMS.Models.Diagnosis.MedicalRecord", "MedicalRecord")
                        .WithMany()
                        .HasForeignKey("MedicalRecordId1");

                    b.HasOne("MSMS.Models.Diagnosis.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MedicalRecord");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MSMS.Models.Diagnosis.MedicalRecord", b =>
                {
                    b.HasOne("MSMS.Models.Diagnosis.Patient", "Patient")
                        .WithOne("MedicalRecord")
                        .HasForeignKey("MSMS.Models.Diagnosis.MedicalRecord", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MSMS.Models.MedicineInventory.Medicine", b =>
                {
                    b.HasOne("MSMS.Models.MedicineInventory.Supplier", "Supplier")
                        .WithMany("Medicines")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("MSMS.Models.Procedures.ActiveProcedure", b =>
                {
                    b.HasOne("MSMS.Models.Diagnosis.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MSMS.Models.Procedures.Procedure", "Procedure")
                        .WithMany()
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Procedure");
                });

            modelBuilder.Entity("MSMS.Models.Diagnosis.MedicalRecord", b =>
                {
                    b.Navigation("Diagnoses");
                });

            modelBuilder.Entity("MSMS.Models.Diagnosis.Patient", b =>
                {
                    b.Navigation("MedicalRecord")
                        .IsRequired();
                });

            modelBuilder.Entity("MSMS.Models.MedicineInventory.Supplier", b =>
                {
                    b.Navigation("Medicines");
                });
#pragma warning restore 612, 618
        }
    }
}
